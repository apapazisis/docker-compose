version: '3.7'

services:
    nginx:
        image: nginx:alpine
        volumes:
            - ./www:/usr/share/www/html:delegated # declare that the host's www folder contents will mount the html folder of container
            - ./nginx/server.conf:/etc/nginx/conf.d/default.conf # copy an nginx configuration to server container and replace the default
        ports:
            - 8000:80
        environment:
            - NGINX_HOST=${NGINX_HOST}
        restart: always
        networks:
            - server_net
            - ngrok_net
        extra_hosts:
            - "www.bestfans.test:127.0.0.1"
            - "bestfans.test:127.0.0.1"
    php:
        build: ./php # it specifies the path of Dockerfile (need to run docker-compose build). No need to add image tag
        restart: always
        working_dir: /usr/share/www/html
        networks:
            - server_net
        volumes:
            - ./www:/usr/share/www/html:delegated
            - ./php/php.ini:/usr/local/etc/php/php.ini:delegated
    db:
        image: mysql:8.0.19
        command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-authentication-plugin=mysql_native_password']
        restart: always
        networks:
            - server_net
        volumes:
            - ./db/dump.sql:/docker-entrypoint-initdb.d/dump.sql # it populate this dump.sql
            - ./db/persist:/var/lib/mysql # when docker-compose down is used and then docker-compose up -d the database will not be affected
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - MYSQL_ALLOW_EMPTY_PASSWORD=${MYSQL_ALLOW_EMPTY_PASSWORD}
        ports:
            - "7000:3306"
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        restart: always
        networks:
            - server_net
        ports:
            - "9000:80"
        environment:
            PMA_HOST: db
        depends_on:
            - db
      es01:
        image: elasticsearch:7.6.2
        environment:
            - node.name=es01
            - discovery.seed_hosts=es02
            - cluster.initial_master_nodes=es01,es02
            - cluster.name=es-docker-cluster
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        networks:
            - server_net
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
            - 9200:9200
        volumes:
            - ./elasticsearch/es01/data:/usr/share/elasticsearch/data
    es02:
        image: elasticsearch:7.6.2
        environment:
            - node.name=es02
            - discovery.seed_hosts=es01
            - cluster.initial_master_nodes=es01,es02
            - cluster.name=es-docker-cluster
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        networks:
            - server_net
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - ./elasticsearch/es02/data:/usr/share/elasticsearch/data
    redis:
        image: redis:4.0-alpine
        restart: always
        networks:
            - server_net
        volumes:
            - ./redis_data:/data
    ngrok:
        image: wernight/ngrok:latest
        networks:
            - ngrok_net
        environment:
            - NGROK_AUTH=1T94nzUl4iUX2cCfbZX0m16YACu_4ZAisydLv1mWhpyFFxVdc
            - NGROK_PORT=nginx:80
            - NGROK_REGION=${NGROK_REGION}
networks:
    server_net:
    ngrok_net:
